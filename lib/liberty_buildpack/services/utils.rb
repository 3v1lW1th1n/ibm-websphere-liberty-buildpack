# Encoding: utf-8
# IBM WebSphere Application Server Liberty Buildpack
# Copyright 2013 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

module LibertyBuildpack::Services

  #-----------------------------------
  # A class of static utility methods
  #-----------------------------------
  class Utils

    #---------------------------------------------------------------------
    # A utility method that can be used by most service classes to generate runtime-vars.xml entries. Services with json that does not follow normal conventions
    # cannot use this utility method and must provide the proper implementation in the service class. If you find this utility method doesn't quite work for you,
    # you must write your own implementation - do not change this utility method
    #
    # @param element - the root REXML element for the runtime-vars.xml doc. A new sub-element will be written to this doc for each cloud variable generated.
    # @param properties - the hash containing the vcap_services data for the service instance.
    # return a hash of cloud variables that mirrors what was written to runtime-vars.xml for use in the service implementation, as appropriate.
    #-----------------------------------------------------------------------
    def self.parse_compliant_vcap_service(element, properties)
      hash_to_return = {}
      properties.keys.each do |property|
        if properties[property].class == String
          # base attribute. Create cloud form of variable and add to runtime_vars and hash.
          # To make life easier for the user, add a special key into the return hash to make it easier to find the name of the service.
          hash_to_return['service_name'] = properties[property] if property == 'name'
          name = "cloud.services.#{properties['name']}.#{property}"
          value = properties[property]
          add_runtime_var(element, hash_to_return, name, value)
        elsif properties[property].class == Hash && property == 'credentials'
          # credentials. Create cloud form of variable and add to runtime_vars and hash
          properties[property].keys.each do |subproperty|
            name = "cloud.services.#{properties['name']}.connection.#{subproperty}"
            value = properties[property][subproperty]
            add_runtime_var(element, hash_to_return, name, value)
          end # each subproperty
        end
      end
      hash_to_return
    end

    #------------------------------------------------------------------------------------
    # a method to get a cloud property substitution variable.
    #
    # @param properties - the hash of cloud variables generated by the Utils.parse_compliant_vcap_service method.
    # @param service_name - the name of the calling service, for debug purposes.
    # @param prop_name - the basic property name, in cloud form. Something like cloud.service.*.port, cloud.service.*.host,, etc
    # @param prop_name_alias - the alias if the property has one (e.g. host and hostname are considered aliases.)
    # return the ant-style cloud variable.
    # @raise if the property does not exist in properties.
    #------------------------------------------------------------------------------------
    def self.get_cloud_property(properties, service_name, prop_name, prop_name_alias = nil)
      return "${#{prop_name}}" if properties.key?(prop_name)
      return "${#{prop_name_alias}}" if prop_name_alias.nil? == false && properties.key?(prop_name_alias)
      raise "Resource #{service_name} does not contain a #{prop_name} property"
    end

    #------------------------------------------------------------------------------------
    # A utility method to to add features into the server.xml featurManager.
    #
    # @param doc - the root element of the REXML::Document for server.xml
    # @param features - an array of features to add to the featureManager. e.g ['logAnalysis-1.0']
    #------------------------------------------------------------------------------------
    def self.add_features(doc, features)
      raise 'invalid parameters' if doc.nil? || features.nil? || features.length == 0
      # Get the featureManager element. Assume there may be multiples
      managers = doc.elements.to_a('//featureManager')
      raise 'Feature Manager not found' if managers.size == 0
      features.each do |feature|
        found = false
        managers.each do |manager|
          elements = manager.get_elements('feature')
          elements.each do |element|
            text = element.text
            if text == feature
              found = true
              break
            end # if
          end  # element
        end # managers
        if found == false
          log_feature = REXML::Element.new('feature', managers[0])
          log_feature.add_text(feature)
        end
      end
    end

    #----------------------------------------------------------------------------------------
    # A Utility method that ensures bootstrap.properties exists in the server directory and contains specified property
    #
    # @param server_dir - the name of the server dir.
    # @param property - The string that specifies the property, e.g. 'websphere.log.provider=binaryLogging-1.0'
    # @param reg_ex - The Regexp used to search an existing bootstrap.properties for a property, e.g. /websphere.log.provider[\s]*=[\s]*binaryLogging-1.0/
    #---------------------------------------------------------------------------------------
    def self.update_bootstrap_properties(server_dir, property, reg_ex)
      raise 'invalid parameters' if server_dir.nil? || property.nil? || reg_ex.nil?
      bootstrap = File.join(server_dir, 'bootstrap.properties')
      if File.exist?(bootstrap) == false
        File.open(bootstrap, 'w')  { |file| file.write(property) }
      else
        bootstrap_contents = File.readlines(bootstrap)
        bootstrap_contents.each do |line|
          return if (line =~ reg_ex).nil? == false
        end
        File.open(bootstrap, 'a')  { |file| file.write(property) }
      end
    end

    private

    #-------------------------------------------
    # Add a runtime var to runtime-vars.xml
    #
    # @param element - the root element of runtime-vars.xml
    # @param instance_hash - a hash passed in by the user to which the name-value pair is added.
    # @param name - the name to add
    # @param value - the value to add
    #---------------------------------------------
    def self.add_runtime_var(element, instance_hash, name, value)
      new_element = REXML::Element.new('variable', element)
      new_element.add_attribute('name', name)
      new_element.add_attribute('value', value)
      instance_hash[name] = value
    end
  end
end
